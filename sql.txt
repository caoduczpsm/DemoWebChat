List<Map<Reservation, String>> reservationProviderList = reservations.getReservationsHaveProductOnSpecifiedDate(hotelId,
                breakfastProductId, dateList, now);

reservationProviderList.forEach(rp -> {
                rp.forEach((reservation, provider) -> {
                    cancelledLineItemList.addAll(reservation
                            .getAllLineItems().stream().filter(lineItem -> lineItem.productId.equals(breakfastProductId)
                                    && dateList.contains(lineItem.serviceDate) && lineItem.isActive() && lineItem.confirmed != null)
                            .collect(Collectors.toList()));
                    if (nonNormalPaymentStringList.contains(provider)) {
                        reservationSendToCustomerService.add(reservation);
                    } else {
                        reservationNeedToRefund.add(reservation);
                    }
                });
            });
            
Map<Reservation, String> test = new HashMap<Reservation, String>();

reservationProviderList.forEach(rp -> {
                rp.forEach((reservation, provider) -> {
                    if (nonNormalPaymentStringList.contains(provider)) {
                        reservationSendToCustomerService.add(reservation);
                        test.put(reservation, provider);
                    }
                });
            });

reservationProviderList.forEach((reservation, provider) -> {
                if(!test.containsKey(reservation))
                        reservationNeedToRefund.add(reservation);
                });


public List<Map<Reservation, String>> getReservationsHaveProductOnSpecifiedDate(Long hotelId, Long productId, List<LocalDate> dateList, Instant instant) {
        String sql = "SELECT r.*, pa.payment_service_provider \n"
                    + "FROM reservation r \n"
                    + "    LEFT JOIN line_item l ON l.reservation_id = r.id \n"
                    + "    LEFT JOIN payment p ON p.reservation_code = r.reservation_code \n"
                    + "    LEFT JOIN payment_account pa ON p.payment_account_id = pa.id\n"
                    + "WHERE r.state != 'CANCELED'\n"
                    + "    AND r.hotel_id = :hotel_id \n"
                    + "    AND p.amount > 0 \n"
                    + "    AND l.product_id = :product_id \n"
                    + "    AND l.cancelled IS NULL \n"
                    + "    AND l.refundable IS TRUE \n"
                    + "    AND l.service_date IN (:notAvailableDate) \n"
                    + "GROUP BY (r.id, pa.payment_service_provider) \n";
        return jdbcTemplate.query(sql,
                new MapSqlParameterSource().addValue("hotel_id", hotelId)
                        .addValue("product_id", productId).addValue("notAvailableDate", dateList),
                this::reservationMapMapping);
    }
